name: CI

on:
  push:
    branches:
      - main
      - minikube
  pull_request:
    branches:
      - main

jobs:
  # unit-test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [10.x, 12.x, 14.x]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Build
  #       run: |
  #         yarn install
  #         yarn build
  #     - name: Test
  #       run: yarn test --coverage --watchAll=false
  #     - uses: codecov/codecov-action@v1
  #       with:
  #         flags: unitests

  # e2e:
  #   needs: [unit-test]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       browser: [chrome, firefox]
  #   services:
  #     keycloak:
  #       image: quay.io/keycloak/keycloak:12.0.2
  #       ports:
  #         - 8180:8080
  #       env:
  #         KEYCLOAK_USER: admin
  #         KEYCLOAK_PASSWORD: admin
  #       options: >-
  #         --health-cmd "curl --fail http://localhost:8080/auth || exit 1"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     controls-db:
  #       image: postgres:13.1
  #       ports:
  #         - 5433:5432
  #       env:
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: controls_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     application-inventory-db:
  #       image: postgres:13.1
  #       ports:
  #         - 5434:5432
  #       env:
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: application_inventory_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Keycloak Admin CLI
  #       uses: carlosthe19916/keycloak-action@0.4
  #       with:
  #         server: http://keycloak:8080/auth
  #         username: admin
  #         password: admin
  #         kcadm: create realms -f konveyor-realm.json
  #     - name: Controls API
  #       run: |
  #         docker run -d --name controls --network ${{ job.services.controls-db.network }} --network-alias controls -p 8081:8080 \
  #         -e QUARKUS_HTTP_PORT=8080 \
  #         -e QUARKUS_DATASOURCE_USERNAME=user \
  #         -e QUARKUS_DATASOURCE_PASSWORD=password \
  #         -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://controls-db:5432/controls_db \
  #         -e QUARKUS_OIDC_AUTH_SERVER_URL=http://keycloak:8080/auth/realms/konveyor \
  #         -e QUARKUS_OIDC_CLIENT_ID=controls-api \
  #         -e QUARKUS_OIDC_CREDENTIALS_SECRET=secret quay.io/konveyor/tackle-controls:latest-native
  #         sleep 5s && docker logs controls
  #     - name: Application inventory API
  #       run: |
  #         docker run -d --name application-inventory --network ${{ job.services.application-inventory-db.network }} --network-alias application-inventory -p 8082:8080 \
  #         -e QUARKUS_HTTP_PORT=8080 \
  #         -e QUARKUS_DATASOURCE_USERNAME=user \
  #         -e QUARKUS_DATASOURCE_PASSWORD=password \
  #         -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://application-inventory-db:5432/application_inventory_db \
  #         -e QUARKUS_OIDC_AUTH_SERVER_URL=http://keycloak:8080/auth/realms/konveyor \
  #         -e QUARKUS_OIDC_CLIENT_ID=application-inventory-api \
  #         -e QUARKUS_OIDC_CREDENTIALS_SECRET=secret quay.io/konveyor/tackle-application-inventory:latest-native
  #         sleep 5s && docker logs application-inventory
  #     - name: Build
  #       run: |
  #         yarn install
  #         yarn build:instrumentation
  #     - name: Cypress run
  #       uses: cypress-io/github-action@v2
  #       with:
  #         record: false
  #         start: yarn run ui:start
  #         wait-on: "http://localhost:3000"
  #         wait-on-timeout: 120
  #         config: pageLoadTimeout=100000
  #         browser: ${{ matrix.browser }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/upload-artifact@v1
  #       if: failure()
  #       with:
  #         name: e2e-screenshots-${{ matrix.os }}-${{ matrix.browser }}
  #         path: cypress/screenshots
 #     - uses: actions/upload-artifact@v1  #       if: always()  #       with:
  #         name: e2e-videos-${{ matrix.os }}-${{ matrix.browser }}
  #         path: cypress/videos
  #     - uses: codecov/codecov-action@v1
  #       with:
  #         flags: e2etests

  e2e-ks8:
    # needs: [unit-test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        browser: [chrome]
        # browser: [chrome, firefox]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: yarn install
      - name: a
        run: echo "CONTROLS_URL=192.168.1.6" >> $GITHUB_ENV
      - name: b
        run: |
          echo $CONTROLS_URL
          yarn run ui:start

      # - name: Build
      #   run: |
      #     yarn install
      #     yarn build:instrumentation
      # - name: Setup Minikube
      #   uses: manusa/actions-setup-minikube@v2.3.1
      #   with:
      #     minikube version: v1.17.1
      #     kubernetes version: v1.20.2
      #     driver: docker
      #     start args: '--addons=registry --addons=ingress'
      # - name: Validate Minikube
      #   run: minikube status | grep Running
      # - name: Validate Cluster
      #   run: kubectl get nodes
      # - name: Validate enabled addon in arg
      #   run: minikube addons list -o json | jq '.registry.Status' | grep enabled
      # - name: Deploy Tackle        
      #   run: |          
      #     kubectl create ns tackle

      #     kubectl create -f kubernetes/keycloak -n tackle
      #     kubectl wait deployment/keycloak --for condition=available --timeout=-1s -n tackle
          
      #     kubectl create -f kubernetes/controls -n tackle
      #     kubectl wait deployment/tackle-controls --for condition=available --timeout=-1s -n tackle

      #     kubectl create -f kubernetes/application-inventory -n tackle
      #     kubectl wait deployment/tackle-application-inventory --for condition=available --timeout=-1s -n tackle          

      #     kubectl create -f kubernetes/ing.yml -n tackle

      #     kubectl get ingress tackle -o json -n tackle

      #     # export TACKLE_INGRESS_IP=$(kubectl get ingress tackle -o json -n tackle | jq -r ".status.loadBalancer.ingress[].ip")
      #     # export TACKLE_CONTROLS_HOST=https://$TACKLE_INGRESS_IP
      #     # export TACKLE_APPLICATION_INVENTORY_HOST=https://$TACKLE_INGRESS_IP
          
      #     # echo TACKLE_INGRESS_IP=$(TACKLE_INGRESS_IP)
      #     # echo TACKLE_APPLICATION_INVENTORY_HOST=$(TACKLE_APPLICATION_INVENTORY_HOST)

      # - name: Ingress
      #   run: bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get ingress tackle --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" -n tackle); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip'
      # - name: Cypress run
      #   uses: cypress-io/github-action@v2
      #   with:
      #     record: false
      #     start: yarn run ui:start
      #     wait-on: "http://localhost:3000"
      #     wait-on-timeout: 120
      #     config: pageLoadTimeout=100000
      #     browser: ${{ matrix.browser }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - uses: actions/upload-artifact@v1
      #   if: failure()
      #   with:
      #     name: e2e-screenshots-${{ matrix.os }}-${{ matrix.browser }}
      #     path: cypress/screenshots
      # - uses: actions/upload-artifact@v1
      #   if: always()
      #   with:
      #     name: e2e-videos-${{ matrix.os }}-${{ matrix.browser }}
      #     path: cypress/videos
      # - uses: codecov/codecov-action@v1
      #   with:
      #     flags: e2etests

  # container-images:
  #   if: ${{ github.event_name != 'pull_request' && github.repository_owner == 'konveyor' }}
  #   runs-on: ubuntu-latest
  #   needs: [unit-test, e2e]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - name: Build
  #       run: |
  #         yarn install
  #         yarn build
  #     - name: Push to Quay.io
  #       uses: elgohr/Publish-Docker-Github-Action@3.02
  #       with:
  #         registry: quay.io
  #         name: konveyor/tackle-ui
  #         username: ${{ secrets.QUAYIO_USERNAME }}
  #         password: ${{ secrets.QUAYIO_PASSWORD }}
  #         dockerfile: Dockerfile
  #         snapshot: false
  #         tags: "main"
  # test-container-images:
  #   needs: [container-images]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       browser: [chrome, firefox]
  #   services:
  #     keycloak:
  #       image: quay.io/keycloak/keycloak:12.0.2
  #       ports:
  #         - 8180:8080
  #       env:
  #         KEYCLOAK_USER: admin
  #         KEYCLOAK_PASSWORD: admin
  #       options: >-
  #         --health-cmd "curl --fail http://localhost:8080/auth || exit 1"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     controls-db:
  #       image: postgres:13.1
  #       ports:
  #         - 5433:5432
  #       env:
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: controls_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     application-inventory-db:
  #       image: postgres:13.1
  #       ports:
  #         - 5434:5432
  #       env:
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: application_inventory_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Keycloak Admin CLI
  #       uses: carlosthe19916/keycloak-action@0.4
  #       with:
  #         server: http://keycloak:8080/auth
  #         username: admin
  #         password: admin
  #         kcadm: create realms -f konveyor-realm.json
  #     - name: Controls API
  #       run: |
  #         docker run -d --name controls --network ${{ job.services.controls-db.network }} --network-alias controls -p 8081:8080 \
  #         -e QUARKUS_HTTP_PORT=8080 \
  #         -e QUARKUS_DATASOURCE_USERNAME=user \
  #         -e QUARKUS_DATASOURCE_PASSWORD=password \
  #         -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://controls-db:5432/controls_db \
  #         -e QUARKUS_OIDC_AUTH_SERVER_URL=http://keycloak:8080/auth/realms/konveyor \
  #         -e QUARKUS_OIDC_CLIENT_ID=controls-api \
  #         -e QUARKUS_OIDC_CREDENTIALS_SECRET=secret \
  #         quay.io/konveyor/tackle-controls:latest-native
  #         sleep 5s && docker logs controls
  #     - name: Application inventory API
  #       run: |
  #         docker run -d --name application-inventory --network ${{ job.services.application-inventory-db.network }} --network-alias application-inventory -p 8082:8080 \
  #         -e QUARKUS_HTTP_PORT=8080 \
  #         -e QUARKUS_DATASOURCE_USERNAME=user \
  #         -e QUARKUS_DATASOURCE_PASSWORD=password \
  #         -e QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://application-inventory-db:5432/application_inventory_db \
  #         -e QUARKUS_OIDC_AUTH_SERVER_URL=http://keycloak:8080/auth/realms/konveyor \
  #         -e QUARKUS_OIDC_CLIENT_ID=application-inventory-api \
  #         -e QUARKUS_OIDC_CREDENTIALS_SECRET=secret \
  #         quay.io/konveyor/tackle-application-inventory:latest-native
  #         sleep 5s && docker logs application-inventory
  #     - name: Tackle UI
  #       run: |
  #         docker run -d --name tackle-ui --network ${{ job.services.keycloak.network }} --network-alias tackle-ui -p 3000:8080 \
  #         -e SSO_REALM=konveyor \
  #         -e SSO_CLIENT_ID=tackle-ui \
  #         -e SSO_SERVER_URL=http://keycloak:8080/auth \
  #         -e CONTROLS_API_URL=http://controls:8080/controls \
  #         -e APPLICATION_INVENTORY_API_URL=http://application-inventory:8080/application-inventory \
  #         quay.io/konveyor/tackle-ui:main
  #         sleep 5s && docker logs tackle-ui
  #     - name: Cypress run
  #       uses: cypress-io/github-action@v2
  #       with:
  #         record: false
  #         wait-on: "http://localhost:3000"
  #         wait-on-timeout: 120
  #         config: pageLoadTimeout=100000
  #         browser: ${{ matrix.browser }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CYPRESS_auth_base_url: http://localhost:3000/auth
  #         CYPRESS_controls_base_url: http://localhost:8081/controls
  #         CYPRESS_application_inventory_base_url: http://localhost:8082/application-inventory
  #     - uses: actions/upload-artifact@v1
  #       if: failure()
  #       with:
  #         name: container-screenshots-${{ matrix.os }}-${{ matrix.browser }}
  #         path: cypress/screenshots
  #     - uses: actions/upload-artifact@v1
  #       if: always()
  #       with:
  #         name: container-videos-${{ matrix.os }}-${{ matrix.browser }}
  #         path: cypress/videos
